Spring IOC
----------
1. default-init-method what will do?
	Answer: If we define default-init-method, it will try to execute that init method before each bean initialization. That init method need to define inside of each bean class, but not necessary.
	
2. afterPropertiesSet() from InitializingBean interface and init-method in xml, which will call first?
	Answer: afterPropertiesSet() method will call first after that whatever we mentioned in init-method of that bean in context xml, that will execute. If we used interface and xml config in bean and init-method name same as afterPropertiesSet(). Then it will execute only once.
	
3. destroy() from DisposableBean interface and destroy-method in xml, which will call first?
	Answer: destroy() method will call first after that whatever we mentioned in destroy-method of that bean in context xml, that will execute. If we used interface and xml config in bean and destory-method name same as destroy(). Then it will execute only once.	

4. BeanPostProcessor and Ordered interface?
	Answer: BeanPostProcessor is used to callback before bean initialization and after initialization of every bean. We have to implement BeanPostProcessor interface and the implemented class need to be define in xml. If we define the implemented class in xml, spring will automatically identify that as post process bean.
		Ordered interface is used to order the one or more BeanPostProcessor in same context. It will implement getOrder() method to define the order.

5. Can we use BeanPostProcessor implemented class as normal bean?
	Answer: Yes, we can use as a normal bean class. But it is not recommended. As we are using only for post procees purpose. If we didn't define id or name for that bean, then we can't access through container.
	
6. When index is required in constructor-ref or property?
	Answer: If the constructor arguments are in same type or if we didn't define type then we have to go for that options.
	
7. Can we declare inner beans?
	Answer: Yes, we can define inner beans. Instead of defining ref arguments, we can define inner beans. But inner beans, we can't use it outside.
	
8. Can we use inner beans outisde by using Context.getBeans()?
	Answer: No, inner beans never called or used outisde.
	
9. What are the ways to do Dependency Injection in spring?
	Answer:
		1. Constructor Based
		2. Setter Based
		
10. What are the collections, we can use it in bean configuration?
	Answer:
		1. List
		2. Set
		3. Map
		4. props
		
11. What is value-type in list?
	Answer: value-type defining the data type of elements or values inside the list.
	
12. How to create a linked list in xml?
	Answer: Using java.util.LinkedList, we can create a linked list and assign to the property, where we required.
		<bean id="linkedList" class="java.util.LinkedList">
			<constructor-arg>
				<list>
					<value>India</value>
					<value>Sri Lanka</value>
					<value>Thailand</value>
				</list>
			</constructor-arg>
	   </bean>
	   
13. How to inject another bean inside list?
	Answer: Using below code we can inject another bean reference to list. But, the list should accept all objects.
		<list>
			..
			<ref bean="beanName"></ref>
		</list>
		
14. How to assign empty and null value in spring xml?
	Answer: We can use "" to assign empty value and we can use <null/> to assign null value to any element. See the below example.
		To assign Empty value:
		----------------------
		<bean id = "..." class = "exampleBean">
		   <property name = "email" value = ""/>
		</bean>
		
		To assign Null Value:
		-----------------------
		<bean id = "..." class = "exampleBean">
		   <property name = "email"><null/></property>
		</bean>
		
15. Autowire types in spring?
	Answer:
		1. no
		2. byName
		3. byType
		4. constructor
		5. default
		
16. Can we override autowiring?
	Answer: Yes, by defining constructor or setter based, we can override the autowire.
	
17. Can we autowire primitive data types?
	Answer: No, primitive data types and strings, can't do autowire.
	
18. What are the scope types available in Spring?
	Answer:
		1. singleton
		2. prototype
		3. request
		4. session
		5. global-session
		
19. How you create new instance, whenever the bean is calling?
	Answer: We can set bean scope as prototype. Then it will create a new instance, whenever we are calling.
			In XML => scope="prototype"
			In Annoation => @Scope("prototype")

20. What are the EventHandlers available in Spring Context?
	Answer:
		1. ContextRefreshedEvent
		2. ContextStartedEvent
		3. ContextStoppedEvent
		4. ContextClosedEvent
		5. RequestHandledEvent

21. How many types of RetentionPolicy?
	Answer:
		1. SOURCE
		2. CLASS
		3. RUNTIME
		
22. What is @Target?
	Answer: @Target will define the target element.
	
23. What are the element types are available in @Target?
	Answer:
		ElementType.ANNOTATION_TYPE
		ElementType.CONSTRUCTOR
		ElementType.FIELD
		ElementType.LOCAL_VARIABLE
		ElementType.METHOD
		ElementType.PACKAGE
		ElementType.PARAMETER
		ElementType.TYPE -> Class, Interface, enum and annotation
		
24. Give some example usage of ANNOTATION_TYPE in @Target?
	Answer: Answer is in the question itself. We are using @Target and @Retention only for custom annotation place.
	
25. How annotation used in Java super class can be inherited to sub classes?
	Answer: Using @Inherited, we can inherit the annoations used in super class to sub class. We can this annotation only on Custom Annoation. Not in class directly.
	
26. How to create custom annotation?
	Answer: Using @Interface , we can create custom annotation.
	
27. What are the ways to use multiple configuration class?
	Answer:
		1. If all the configuration is inside same package, then we can mention base package, it will take all configuration
		2. If the configuration class in different package, 
			1. We can define all the packages in @ComponentScan(basePackages="{}")
			2. We can import the config class in main config class using @Import annotation

28. How to avoid component scan for particular sub package in xml and annotation?
	Answer:
		1. XML - <context:exclude-filter type="annotation" expression="com.demo.ignore"/>
		2. Annoation - @ComponentScan(basePackages = "com.concretepage",
			includeFilters = @Filter(type = FilterType.REGEX, pattern="com.concretepage.*.*Util"),
			excludeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = IUserService.class)) 
	
29. What are the  Component Scan Filter Types?
	Answer:
		Find the component filter types. 
		
		ANNOTATION: Component scan of classes can be included and excluded by configuring annotation name applied at class level. 

		ASSIGNABLE_TYPE: Using interface name or class name that has been implemented or extended by the classes, we can include and exclude classes in component scanning. 

		ASPECTJ: Using aspect expression targeting classes names, it can be included and excluded in component scanning. 

		REGEX: Using regex expression targeting classes names, it can be included and excluded in component scanning. 

		custom: We can also create custom filter type by implementing org.springframework.core.type.TypeFilter.
		
30. What is the difference between @Autowired and @Autowired()?
	Answer: No difference both are same.
	
31. How to load property file into class?
	Answer: Using @PropertySource(classpath:test.properties), we can load property file into class.
	
32. How to use the value from properties file after its loaded?
	Answer: Using ${varname}, we can get the value from properties file.

33. Explain Bean lifecycle in Spring framework?
	Answer:
	Following is sequence of a bean lifecycle in Spring:

	Instantiate: First the spring container finds the bean’s definition from the XML file and instantiates the bean.

	Populate properties: Using the dependency injection, spring populates all of the properties as specified in the bean definition.

	Set Bean Name: If the bean implements BeanNameAware interface, spring passes the bean’s id to setBeanName() method.

	Set Bean factory: If Bean implements BeanFactoryAware interface, spring passes the beanfactory to setBeanFactory() method.

	Pre Initialization: Also called post process of bean. If there are any bean BeanPostProcessors associated with the bean, Spring calls postProcesserBeforeInitialization() method.

	Initialize beans: If the bean implements IntializingBean,its afterPropertySet() method is called. If the bean has init method declaration, the specified initialization method is called.

	Post Initialization: – If there are any BeanPostProcessors associated with the bean, their postProcessAfterInitialization() methods will be called.

	Ready to use: Now the bean is ready to use by the application

	Destroy: If the bean implements DisposableBean , it will call the destroy() method
	
	
Spring - AOP
------------
1. What is AOP?
	Answer: Aspect Oriented Programming. Aspect means class,type, method, constructor and so on.
	
2. Can we use Spring AOP in xml based context?
	Answer: Yes, ofcourse , we can use Spring AOP in xml based context. But, we can't directly use AspectJ in xml based contexr, since it is annotation based.
	
3. Which is best Spring AOP or AspectJ AOP?
	Answer: Spring AOP is best when you are going with Spring framework. Any how Spring AOP internally using AspectJ AOP only.
	
4. What is the difference between Spring AOP and AspectJ AOP?
	Answer:
		Spring AOP									AspectJ AOP
		-------------------------------------		----------------------------------------------------
		1. We can use it in XML	Based context		We can't use it in xml based context, only annotation
			and annotation based also.
		
		2. No need to do any extra configuration	If you want to use AspectJ directly in spring framework, then we need to some more configurations.
			while doing with spring framework
			
		3. Limited features							More features compared to Spring AOP
		
		4. Internally using AspectJ AOP				AspectJ is stand alone.
		
		5. We can use it only on methods			We can use it for other types. Ex: constructor
		
5. Which tag will use it to define aspects in XML?
	Answer: <aop:config></aop:config> will be used to define all aspects inside it. To use this tag, we need to import this context http://www.springframework.org/schema/aop in xml.
	
6. What is Advice and types of advice in AOP?
	Answer: AOP advice is kind of an interceptor around the joint point. Here joint point means method execution.
			Types:
			------
			Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).

			After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.

			After throwing advice: Advice to be executed if a method exits by throwing an exception.

			After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).

			Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.
			
7. What is pointcut?
	Answer: Pointcut is a expression will intimate where to check the methods.
	
8. Type of pointcut designators?
	Answer:
		1. execution
		2. within
		3. this
		4. target
		5. args
		6. bean
		7. @target
		8. @args
		9. @within
		10. @annotation
	
9. How to define pointcut only for inside packages not in sub package classes method execution?
	Answer: execution(* com.xyz.service.*.*(..))
	
10. How to define the order of advice execution?
	Answer: Either we can use @Order annotation or we can implement the Ordered interface. Which is the lowest number will execute first.
	
11. If advice method in different aspect class, then we can use @Order or Ordered interface. What we can do if advice methods are in same Aspect class?
	Answer: If advice methods are in same class, then based on method name, it will execute. For example method names are log() and log1(). Then log() will execute first, then log1() will execute.
	
12. Whether aspect will be create new instance or single instance proxy?
	Answer: Based on bean definition, it will create single or multiple instances will be created.
	For example: Target class is prototype and Aspect class in singleton. Then all target class objects, it will give only one instance of aspect.
	
13. How enable AspectJ in spring using annotation and xml?
	Answer:
		XML -> <aop:aspectj-autoproxy/>
		Annotation -> @EnableAspectJAutoProxy
		
14. Advising aspects with other aspects?
	Answer: In Spring AOP, it is not possible to have aspects themselves be the target of advice from other aspects. The @Aspect annotation on a class marks it as an aspect, and hence excludes it from auto-proxying. 
	
15. In target class local or internal calls to methods from another method, will go through by proxy class or not?
	Answer: No. A call from a method in a target to another method in the target does not get intercepted by the proxy. Try to remember the proxy pattern.
	
16. How you call through the proxy class, while calling internal method from another internal method?
	Answer: Using AopContext.currentProxy(), we can get a proxy class of current class. With that we can call the method, which we want to call. 
	Of course, take heed that this tightly couples your core business concern to AOP – something you are trying to avoid with AOP to begin with.  So it may be better to refactor the code such that internal calls are not required when you need advice to fire on all methods.
	
17. How to access the AopContext in outside?
	Answer: Using @EnableAspectJAutoProxy(exposeProxy=true), we can make AopContext to be available in outside.
	
18. How to enable CGLIB proxies instead of using JDK dynamic proxies?
	Answer: Usinng @EnableAspectJAutoProxy(proxyTargetClass=true), we can change the proxy class library to CGLIB proxy library.
	
19. What is @Configurable?
	Answer: There is no way to inject dependencies into a bean created with the new operator. For that we can use @Configurable from AspectJ.
	

Spring MVC:
-----------
1. Diff b/w @Controller and @RestController?
	Answer:
	@Controller is used to mark classes as Spring MVC Controller.
	@RestController is a convenience annotation that does nothing more than adding the @Controller and @ResponseBody annotations
	So the following two controller definitions should do the same

	@Controller
	@ResponseBody
	public class MyController { }

	@RestController
	public class MyRestController { }
	
	A key difference between a traditional MVC controller and the RESTful web service controller above is the way that the HTTP response body is created. Rather than relying on a view technology to perform server-side rendering of the data to HTML, this RESTful web service controller simply populates and returns a object. The object data will be written directly to the HTTP response as JSON.

	This code uses Spring 4’s new @RestController annotation, which marks the class as a controller where every method returns a domain object instead of a view. It’s shorthand for @Controller and @ResponseBody rolled together.
	
	For more details visit the link:https://spring.io/guides/gs/rest-service/
	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html
	
2. Define Deployment descriptor?
	Answer:
	A web application's deployment descriptor describes the classes, resources and configuration of the application and how the web server uses them to serve web requests. When the web server receives a request for the application, it uses the deployment descriptor to map the URL of the request to the code that ought to handle the request.

	The deployment descriptor is a file named web.xml. It resides in the app's WAR under the WEB-INF/ directory. The file is an XML file whose root element is <web-app>.

	Here is a simple web.xml example that maps all URL paths (/*) to the servlet class mysite.server.ComingSoonServlet:

	<web-app xmlns="http://java.sun.com/xml/ns/javaee" version="2.5">
		<servlet>
			<servlet-name>comingsoon</servlet-name>
			<servlet-class>mysite.server.ComingSoonServlet</servlet-class>
		</servlet>
		<servlet-mapping>
			<servlet-name>comingsoon</servlet-name>
			<url-pattern>/*</url-pattern>
		</servlet-mapping>
	</web-app>
	
3. Define DispatcherServlet?
	Answer:
	The DispatcherServlet is an actual Servlet (it inherits from the HttpServlet base class), and as such is declared in the web.xml of your web application. You need to map requests that you want the DispatcherServlet to handle, by using a URL mapping in the same web.xml file.
	
4. Define MVC?
	Answer:
	The Spring Web MVC framework provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements.

	The Model encapsulates the application data and in general they will consist of POJO.

	The View is responsible for rendering the model data and in general it generates HTML output that the client's browser can interpret.

	The Controller is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.
	
5. When REST protocol introduced?
	Answer:
	REST was first introduced by Roy Fielding in 2000.
	
6. What is difference between REST API and SOAP API?
	Answer:
	REST API has no has no official standard at all because it is an architectural style. SOAP API, on the other hand, has an official standard because it is a protocol.
	REST APIs uses multiple standards like HTTP, JSON, URL, and XML while SOAP APIs is largely based on HTTP and XML.
	As REST API deploys multiple standards, so it takes fewer resources and bandwidth as compared to SOAP that uses XML for the creation of Payload and results in the large sized file.
	The ways both APIs exposes the business logics are also different. REST API takes advantage of URL exposure like @path("/WeatherService") while SOAP API use of services interfaces like @WebService.
	SOAP API defines too many standards, and its implementer implements the things in a standard way only. In the case of miscommunication from service, the result will be the error. REST API, on the other hand, don't make emphasis on too many standards and results in corrupt API in the end.
	REST API uses Web Application Description Language, and SOAP API used Web Services Description language for describing the functionalities being offered by web services.
	REST APIs are more convenient with JavaScript and can be implemented easily as well. SOAP APIs are also convenient with JavaScript but don't support for greater implementation.
	
7. What is latest HTTP version?
	Answer:
	Latest -> HTTP/2
	But, still most of the servers are using HTTP/1.1
	
8. Diff b/w AJAX and REST?
	Answer:
	I can do it using AJAX. But I can also do it using a REST call.

	Um, no. Those two are completely orthogonal. If you want to update your page with data you have to get from a server, you will do it using AJAX. There is no other way. And that AJAX call can use REST, or something else.

	My problem is i really dont get the difference between REST and an HTTP browser request.(a.k.a a form submit). I have looked at formal definitions of REST and it seems like a HTTP request.

	A REST call is an HTTP request, always. Though it can be used to handle regular browser calls (like form submits) and return full HTML pages, it's usually used to handle API calls that return only data (usually in JSON format).

	So why it has a separate name?

	Because REST is a specific style of using HTTP, arguably using it as it was originally meant to be used, but which most people didn't "get" and was thus rarely used for almost 2 decades.

	Specifically, REST means encoding which entity you want to retrieve or manipulate in the URL itself (usually via an ID) and encoding what action you want to perform on it in the HTTP method used (GET for retrieving, POST for changing, PUT for creating, DELETE for deleting).

9. Diff b/w AJAX and HTTP?
	Answer:
	XMLHttpRequest (XHR) is an API available to web browser scripting languages such as JavaScript. It is used to send HTTP or HTTPS requests to a web server and load the server response data back into the script.

	And for AJAX request,

	An Ajax call is an asynchronous request initiated by the browser that does not directly result in a page transition.

	An Ajax ("Asynchronous Javascript and XML") request is sometimes called an XHR request ("XmlHttpRequest"), which is the name most browsers give the object used to send an Ajax request, because at least initially Ajax calls involved the sending and receiving of XML but now it's just as common to send/receive JSON, plain text or HTML.

10. Diff b/w SOAP and REST?
	Answer:
	SOAP stands for Simple Object Access Protocol
	REST stands for Representational State Transfer
	
	SOAP is a protocol. SOAP was designed with a specification. It includes a WSDL file which has the required information on what the web service does in addition to the location of the web service.
	REST is an Architectural style in which a web service can only be treated as a RESTful service if it follows the constraints of being
	Client Server
	Stateless
	Cacheable
	Layered System
	Uniform Interface
	
	SOAP cannot make use of REST since SOAP is a protocol and REST is an architectural pattern.
	REST can make use of SOAP as the underlying protocol for web services, because in the end it is just an architectural pattern.
	
	SOAP uses service interfaces to expose its functionality to client applications. In SOAP, the WSDL file provides the client with the necessary information which can be used to understand what services the web service can offer.
	
	REST use Uniform Service locators to access to the components on the hardware device. For example, if there is an object which represents the data of an employee hosted on a URL as http://demo.guru99 , the below are some of URI that can exist to access them
	http://demo.guru99.com/Employee

	http://demo.guru99.com/Employee/1

	SOAP requires more bandwidth for its usage. Since SOAP Messages contain a lot of information inside of it, the amount of data transfer using SOAP is generally a lot.
	<?xml version="1.0"?>
	<SOAP-ENV:Envelope 
	xmlns:SOAP-ENV
	="http://www.w3.org/2001/12/soap-envelope" 
	SOAP-ENV:encodingStyle
	=" http://www.w3.org/2001/12/soap-encoding">
	<soap:Body>
	 <Demo.guru99WebService
	 xmlns="http://tempuri.org/">
	   <EmployeeID>int</EmployeeID>
	   </Demo.guru99WebService>
	 </soap:Body>
	</SOAP-ENV:Envelope>
	REST does not need much bandwidth when requests are sent to the server. REST messages mostly just consist of JSON messages. Below is an example of a JSON message passed to a web server. You can see that the size of the message is comparatively smaller to SOAP.
	{"city":"Mumbai","state":"Maharastra"}

	SOAP can only work with XML format. As seen from SOAP messages, all data passed is in XML format.
	REST permits different data format such as Plain text, HTML, XML, JSON, etc. But the most preferred format for transferring data is JSON.
	
11. Diff b/w HTTP/1.1 and HTTP/2?
	Answer:
	1. Protocol negotiation mechanism — protocol electing, eg. HTTP/1.1, HTTP/2 or other.
	2. High-level compatibility with HTTP/1.1 — methods, status codes, URIs and header fields.
	3. Page load speed improvements trough:
	4. Compression of request headers
	5. Binary protocol
	6. HTTP/2 Server Push
	7. Request multiplexing over a single TCP connection
	8. Request pipelining
	9. HOL blocking (Head-of-line) - Package blocking
	
	Visit for more details - https://medium.com/@factoryhr/http-2-the-difference-between-http-1-1-benefits-and-how-to-use-it-38094fa0e95b
	
12. What are the famous MVC frameworks in JAVA?
	Answer:
	1. Spring MVC
	2. Struts
	
13. what is MVC View Resolver?
14. WebMVCConfigureAdaptor?
15. WebApplicationInitializer?
16. AbstractDispatcherServletInitilizer?
17. BeanNameUrlHandlerMapping?
18. Types of Url Handler Mapping?
19. RequestMappingHandlerMapping?
20. @RequestMapping
21. @EnableWebMvc
22. HandlerAdaptor
23. Ambiguos Mapping Found error - never stop server starting
24. Model & @ModelAttribute
25. commandName vs modelAttribute
26. pathName is needed or not?
27. JSTL?
28. @InitBinder - Only for one way from JSP to JAVA
29. CustomEditor in initbinder and register
30. PropertyEditorSupport
31. BindingResult
32. HibernateValidator
33. ResourceBundleMessageSource
34. @Size, @NotEmpty
35. Custom Validation
36. ConstraintValidator
37. CustomAnnotation
38. @Valid
39. implements Validator for custom validation
40. Interceptor (Proxy)
41. HandlerInterceptorAdapter
42. InterceptorRegistry
43. Filter (Decorator)
44. @WebFilter
45. Decorator Vs Proxy Pattern
46. Interceptor Vs Filter
47. @ExceptionHandler
48. @ResponseStatus
49. Local controller ExceptionHandler will override Global ExceptionHandler
50. @ControllerAdvice
51. SimpleMappingExceptionResolver
52. LocaleChangeInterceptor
53. LocaleResolver
54. CutomLocaleChangeInterceptor
55. SimpleUrlHandlerMapping
56. ViewResolver
57. InternalResourceViewResolver
58. ResourceBundleViewResolver
59. XmlViewResolver

Spring Rest
-----------
1. What is Spring rest?
2. Who introduced AJAX?
3. XHR - XmlHttpRequest
4. browser will cache GET request or not?
5. Can we tell browser to cache some request?
6. Query Parameter
7. Path Variable
8. Matrix Variables
9. POST vs PUT vs DELETE
10. Idempotent
11. what is rest guidelines?
12. Form data two types
13. application/x-www-form-urlencoded
14. origin vs host header
15. 

JPA
---
1. @DynamicUpdate
2. @DynamicInsert